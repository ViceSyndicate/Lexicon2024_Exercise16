@page "/machines"
@using Industriell_Maskinpark_API.Models
@using Industriell_Maskinpark_API.ViewModels
@using Industriell_Maskinpark_Blazor.Services
@inject MachineService MachineService
@inject NavigationManager NavigationManager
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Machines</PageTitle>

<h1>Machines</h1>

@if (machines == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Last Contact</th>
                <th>Last Msg</th>
                <th>Status</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var machine in machines)
            {
                <tr>

                    <td>@machine.Id</td>
                    <td>@machine.Name</td>
                    <td>@machine.LatestContact</td>
                    <td>@machine.LastMessage</td>
                    <td>@machine.Status</td>
                    <td>

                        <button class="btn btn-success" @onclick="() => EditMachine(machine.Id)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16" style="--darkreader-inline-fill: currentColor;" data-darkreader-inline-fill="">
                                <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325"></path>
                            </svg>
                        </button>

                        <button class="btn btn-success" @onclick="() => SendMessage(machine.Id)" style="margin-right: 5px;">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chat-square-dots" viewBox="0 0 16 16" style="--darkreader-inline-fill: currentColor;" data-darkreader-inline-fill="">
                                <path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-2.5a2 2 0 0 0-1.6.8L8 14.333 6.1 11.8a2 2 0 0 0-1.6-.8H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2.5a1 1 0 0 1 .8.4l1.9 2.533a1 1 0 0 0 1.6 0l1.9-2.533a1 1 0 0 1 .8-.4H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"></path>
                                <path d="M5 6a1 1 0 1 1-2 0 1 1 0 0 1 2 0m4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0m4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0"></path>
                            </svg>
                        </button>

                        @if(machine.Status == "Online")
                        {
                            <button class="btn btn-success" @onclick="() => OnOff(machine)" style="margin-right: 5px;">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-power" viewBox="0 0 16 16" style="--darkreader-inline-fill: currentColor;" data-darkreader-inline-fill="">
                                <path d="M7.5 1v7h1V1z"></path>
                                <path d="M3 8.812a5 5 0 0 1 2.578-4.375l-.485-.874A6 6 0 1 0 11 3.616l-.501.865A5 5 0 1 1 3 8.812"></path>
                                </svg>
                            </button>
                        } 
                        else if(machine.Status == "Offline")
                        {
                            <button type="button" class="btn btn-outline-danger" @onclick="() => OnOff(machine)" style="margin-right: 5px;">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-power" viewBox="0 0 16 16" style="--darkreader-inline-fill: currentColor;" data-darkreader-inline-fill="">
                                <path d="M7.5 1v7h1V1z"></path>
                                <path d="M3 8.812a5 5 0 0 1 2.578-4.375l-.485-.874A6 6 0 1 0 11 3.616l-.501.865A5 5 0 1 1 3 8.812"></path>
                                </svg>
                            </button>
                        }

                        <button class="btn btn-danger" @onclick="() => DeleteMachine(machine.Id)" style="margin-right: 5px;">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"></path>
                                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"></path>
                            </svg>
                        </button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}

@code {
    private MachineViewModel[]? machines;

    protected override async Task OnInitializedAsync()
    {
        await GetMachines();
    }

    public async Task EditMachine(Guid id)
    {
        NavigationManager.NavigateTo("edit-machine-form/" + id.ToString());
    }

    public async Task GetMachines()
    {
        List<MachineViewModel> MachineListVM = new List<MachineViewModel>();
        List<Machine> machinesFromApi = await MachineService.GetMachinesAsync();

        foreach (Machine machine in machinesFromApi)
        {
            MachineViewModel VMMachine = new MachineViewModel(machine);
            MachineListVM.Add(VMMachine);
        }

        machines = MachineListVM.ToArray();
    }

    public async Task SendMessage(Guid guid)
    {
        NavigationManager.NavigateTo("message/" + guid.ToString());
    }

    public async Task DeleteMachine(Guid guid)
    {
        Console.WriteLine("Work?");
        bool result = await 
        MachineService.DeleteMachine(guid);
        if (result)
        {
            // Remove the machine from the machineList.
            machines = machines.Where(x => x.Id != guid).ToArray();
            StateHasChanged();
        }
    }

    public async Task OnOff(MachineViewModel machine)
    {
        Machine dto = new Machine(machine);

        var result = await MachineService.FlipPowerSwitch(dto);
        await GetMachines();
        StateHasChanged();
    }
}