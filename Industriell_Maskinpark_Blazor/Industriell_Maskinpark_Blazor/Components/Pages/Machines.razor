@page "/machines"
@using Industriell_Maskinpark_API.Models
@attribute [StreamRendering]

<PageTitle>Machines</PageTitle>

<h1>Machines</h1>

@if (machines == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th><span class="bi bi-trash" aria-hidden="true"></span></th>
                <th>ID</th>
                <th>Name</th>
                <th>Last Contact</th>
                <th>Last Msg</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var machine in machines)
            {
                <tr>
                    <td><button class="bi bi-trash"></button></td>
                    <td>@machine.Id</td>
                    <td>@machine.Name</td>
                    <td>@machine.LatestContact</td>
                    <td>@machine.LastMessage</td>
                    <td>@machine.Status</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private Machine[]? machines;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        Machine machine1 = new Machine
            {
                Id = Guid.NewGuid(),
                Name = "CAT Bulldozer",
                Status = true,
                LastMessage = "Dozin'",
                LatestContact = DateTime.Now
            };
        Machine machine2 = new Machine
            {
                Id = Guid.NewGuid(),
                Name = "CAT Hauler",
                Status = true,
                LastMessage = "Transporting",
                LatestContact = DateTime.Now
            };

        machines = new[] { machine1, machine2 };


        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
